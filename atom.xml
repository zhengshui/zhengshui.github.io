<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shuizheng&#39;s Blog</title>
  <subtitle>Talk is cheap show me the offer!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/zhengshui/zhengshui.github.io.git/"/>
  <updated>2017-06-12T03:52:56.000Z</updated>
  <id>https://github.com/zhengshui/zhengshui.github.io.git/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>my-info</title>
    <link href="https://github.com/zhengshui/zhengshui.github.io.git/2017/06/12/4.my-info/"/>
    <id>https://github.com/zhengshui/zhengshui.github.io.git/2017/06/12/4.my-info/</id>
    <published>2017-06-12T03:52:56.000Z</published>
    <updated>2017-06-12T03:52:56.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>「3」codewars笔记</title>
    <link href="https://github.com/zhengshui/zhengshui.github.io.git/2017/06/12/3.codewars/"/>
    <id>https://github.com/zhengshui/zhengshui.github.io.git/2017/06/12/3.codewars/</id>
    <published>2017-06-12T03:30:51.000Z</published>
    <updated>2017-06-12T03:54:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h1><ul>
<li>郑水/男/1992 </li>
<li>手机：18826408914</li>
<li>Email：shuizheng123@gmail.com / 1941172562@qq.com</li>
<li>微信号：w18826408914</li>
<li>github：<a href="https://github.com/zhengshui">https://github.com/zhengshui</a></li>
<li>个人博客： <a href="https://zhengshui.github.io/" target="_blank" rel="external">https://zhengshui.github.io/</a></li>
<li>本科/广东工业大学数字媒体技术系 </li>
<li>工作年限：2年多</li>
<li>期望职位：前端开发工程师</li>
<li>期望薪资：月薪10k~13k，特别喜欢的公司可例外</li>
</ul>
<hr>
<h1 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h1><h2 id="广州数字人健康科技有限公司-（-2017年3月-至今-）"><a href="#广州数字人健康科技有限公司-（-2017年3月-至今-）" class="headerlink" title="广州数字人健康科技有限公司 （ 2017年3月 ~ 至今 ）"></a>广州数字人健康科技有限公司 （ 2017年3月 ~ 至今 ）</h2><h3 id="家校健康WebApp"><a href="#家校健康WebApp" class="headerlink" title="家校健康WebApp"></a>家校健康WebApp</h3><ul>
<li><p>家校健康主张互联网+校园+健康的理念，基于互联网，连接学校、家庭与医生，为广大学生身心健康提供健康服务，起到预防为主、高效引导的作用。</p>
<p>主要工作：基于react的技术栈重构家校健康v2.0，使用gulp+webpack的构建工具，redux负责数据管理，react-router-dom+react-router-redux负责路由控制，代码规范遵循网易NEC规范（使用eslint工具进行检查），css预处理器使用scss，移动端自适应采用lib-flexible可伸缩布局方案。</p>
<p>结果：使用react来编码是一件很舒服的事情，就像搭积木。组件化，工程化，标准化让项目的可维护性和可扩展性大大的加强。</p>
</li>
</ul>
<h2 id="盈世信息科技-北京-有限公司-（-2015年6月-2017年-）"><a href="#盈世信息科技-北京-有限公司-（-2015年6月-2017年-）" class="headerlink" title="盈世信息科技(北京)有限公司 （ 2015年6月 ~ 2017年 ）"></a>盈世信息科技(北京)有限公司 （ 2015年6月 ~ 2017年 ）</h2><h3 id="Coremail-XT5-企业邮件系统-（http-mt1-icoremail-net-）"><a href="#Coremail-XT5-企业邮件系统-（http-mt1-icoremail-net-）" class="headerlink" title="Coremail XT5 企业邮件系统 （http://mt1.icoremail.net/）"></a>Coremail XT5 企业邮件系统 （<a href="http://mt1.icoremail.net/）" target="_blank" rel="external">http://mt1.icoremail.net/）</a></h3><ul>
<li><p>Coremail XT5，新一代邮件系统，提供快速、高效、便携的协同办公体验，是国内邮件系统的领先者。整个项目非常庞大，分别模块化为邮件，网盘，日程，通讯录，应用中心，设置中心，然后每个模块再细分进行组件化。前端技术栈：CUI （基于AraleJs） +  grunt + Bower + Less + handlebars</p>
<p>负责工作：各个模块的迭代维护与二次定制开发，在这次项目中，印象比较深的任务有：信纸组件开发，第三方网盘，奥联加密，金山软件的Kmail,中国科学院定制开发，139邮箱定制开发。</p>
<p>项目属于敏捷式开发，灰度环境每天打包两次，每天更新的功能可以立刻呈现到公司的每个人，这需要我们具备快速定位问题和解决问题的能力，这点我能很好的完成（多次得到同事的感谢，尽管这是我们的责任，但是这样可以大大提高我们撸码的热情）。</p>
<p>结果：相对于旧的邮件系统XT3，XT5速度得到质的提升，整体页面流量节省80%以上，使得邮箱网页版的响应速度提升近50%。在整个项目过程中，个人收获巨大：前端基础更加扎实，浏览器兼容性，代码质量，前端工程化，组件化。</p>
</li>
</ul>
<h3 id="金山企业邮-Kmail-https-mail-kmail-com"><a href="#金山企业邮-Kmail-https-mail-kmail-com" class="headerlink" title="金山企业邮 Kmail (https://mail.kmail.com)"></a>金山企业邮 Kmail (<a href="https://mail.kmail.com" target="_blank" rel="external">https://mail.kmail.com</a>)</h3><ul>
<li><p>Kmail是金山软件携手国内最大的邮件服务商盈世Coremail根据XT5定制开发的</p>
<p>负责工作： 界面重构，部分模块重构，单点登录对接联调，模块皮肤切换。</p>
<p>这个项目是居于XT5的（本身有在维护），所以整体写起来比较流畅，最终按时按质完成了开发任务，并获得金山软件产品好评。</p>
</li>
</ul>
<h3 id="Coremail-官网（http-www-coremail-cn-）"><a href="#Coremail-官网（http-www-coremail-cn-）" class="headerlink" title="Coremail 官网（http://www.coremail.cn/）"></a>Coremail 官网（<a href="http://www.coremail.cn/）" target="_blank" rel="external">http://www.coremail.cn/）</a></h3><ul>
<li>负责维护Coremail 官网<br>能及时处理官网的各种问题，能很好的完成某个模块的更新，得到市场部同事的肯定。</li>
</ul>
<h2 id="蓝鸽集团-实习-（-2014年7月-2015年2月-）"><a href="#蓝鸽集团-实习-（-2014年7月-2015年2月-）" class="headerlink" title="蓝鸽集团 (实习)（ 2014年7月 ~ 2015年2月 ）"></a>蓝鸽集团 (实习)（ 2014年7月 ~ 2015年2月 ）</h2><h3 id="智能化作业系统"><a href="#智能化作业系统" class="headerlink" title="智能化作业系统"></a>智能化作业系统</h3><ul>
<li>基于智能化知识点识别技术及大数据智能诊断技术的蓝鸽作业系统，主要面向广大中小学，同时兼容大学应用，从而实现大、中小学的一体化设计。</li>
</ul>
<p>结果：很好地完成了智能化作业系统3个模块的前端重构和开发的工作，项目给了我很大的收获：对前后台的数据的交互更加深刻，对浏览器兼容性问题积累更多，对jq的运用更加熟悉。让自己负责的模块渐进增强（只要是用css3进一步优化页面），获得较好的效果。</p>
<h1 id="技能清单"><a href="#技能清单" class="headerlink" title="技能清单"></a>技能清单</h1><p>以下均为我熟练使用的技能</p>
<ul>
<li>前端基础：JS/HTML5/CSS3/JQ/</li>
<li>后端知识：Node（了解），java（看懂）</li>
<li>前端框架：AraleJS/Bootstrap/React/Vue</li>
<li>前端工具：Webpack/Gulp/SaSS/LeSS/cordova/Photoshop</li>
<li>版本管理、文档和自动化部署工具：Svn/Git</li>
</ul>
<h2 id="参考技能关键字"><a href="#参考技能关键字" class="headerlink" title="参考技能关键字"></a>参考技能关键字</h2><ul>
<li>web</li>
<li>webApp</li>
<li>javascript</li>
<li>css3</li>
<li>jquery</li>
<li>html5</li>
<li>react</li>
<li>前端工程化构建</li>
</ul>
<h2 id="其他社会实践"><a href="#其他社会实践" class="headerlink" title="其他社会实践"></a>其他社会实践</h2><ul>
<li><p>校食堂监督委员会 组长</p>
<p>负责组员工作安排，维护同学权益。成果：我们小组所负责食堂有明显的改善，获得同学和领导的好评</p>
</li>
<li><p>数字媒体技术协会 部长</p>
<p>和小伙伴策划和举办数字媒体展，UPA中国宣讲会。<br>在数字媒体协会的日子里，我所获许多，友谊，快乐，与人交流的能力，团队协作能力。</p>
</li>
<li><p>志愿者经历</p>
<p>广州东站春运志愿者</p>
<p>广州残疾和贫困家庭子女义教志愿者</p>
</li>
</ul>
<h2 id="兴趣爱好"><a href="#兴趣爱好" class="headerlink" title="兴趣爱好"></a>兴趣爱好</h2><p>喜欢运动（健身，篮球、足球、排球），有跑步习惯，能在人群中高歌一曲。</p>
<hr>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;个人信息&quot;&gt;&lt;a href=&quot;#个人信息&quot; class=&quot;headerlink&quot; title=&quot;个人信息&quot;&gt;&lt;/a&gt;个人信息&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;郑水/男/1992 &lt;/li&gt;
&lt;li&gt;手机：18826408914&lt;/li&gt;
&lt;li&gt;Email：shuizh
    
    </summary>
    
      <category term="前端" scheme="https://github.com/zhengshui/zhengshui.github.io.git/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="简历" scheme="https://github.com/zhengshui/zhengshui.github.io.git/tags/%E7%AE%80%E5%8E%86/"/>
    
      <category term="前端开发工程师，求职" scheme="https://github.com/zhengshui/zhengshui.github.io.git/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%EF%BC%8C%E6%B1%82%E8%81%8C/"/>
    
  </entry>
  
  <entry>
    <title>「2」移动端的坑</title>
    <link href="https://github.com/zhengshui/zhengshui.github.io.git/2017/06/12/2.mobile-pit/"/>
    <id>https://github.com/zhengshui/zhengshui.github.io.git/2017/06/12/2.mobile-pit/</id>
    <published>2017-06-12T03:30:24.000Z</published>
    <updated>2017-06-12T03:39:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-iOS事件委托失效"><a href="#1-iOS事件委托失效" class="headerlink" title="1.iOS事件委托失效"></a>1.iOS事件委托失效</h3><p>在iOS系统中当事件委托对象为body／document元素时可能会出现事件委托失效的情况；</p>
<p>具体原因为iOS中除了a、button等可点击元素外，其他元素事件不会传递到body／document；</p>
<p>决解方法：</p>
<p>1、将对应元素改为a、button等可点击元素</p>
<p>2、将事件委托到除body／document外的父元素中</p>
<p>3、给​目标元素加一条样式规则”cursor: pointer”；</p>
<hr>
<h3 id="2-fixed（固定位置定位）的问题"><a href="#2-fixed（固定位置定位）的问题" class="headerlink" title="2.  fixed（固定位置定位）的问题"></a>2.  fixed（固定位置定位）的问题</h3><p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/2">https://github.com/maxzhang/maxzhang.github.com/issues/2</a></p>
<p>总结 :</p>
<ul>
<li>在 android 手机下 fixed 表现要比 iOS 更好，软键盘弹出时，不会影响fixed元素定位；</li>
<li>不要在 fixed 元素中使用 input / textarea 元素,而是一个伪input，点击时弹出一个新层。<br>还是保留之前的态度，依然不推荐在 Android下使用 iScroll。在开发项目时，可以考虑分为两个版本：iOS下使用 iScroll的解决方案，Android下使用 position:fixed。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-iOS事件委托失效&quot;&gt;&lt;a href=&quot;#1-iOS事件委托失效&quot; class=&quot;headerlink&quot; title=&quot;1.iOS事件委托失效&quot;&gt;&lt;/a&gt;1.iOS事件委托失效&lt;/h3&gt;&lt;p&gt;在iOS系统中当事件委托对象为body／document元素时可能会
    
    </summary>
    
      <category term="前端" scheme="https://github.com/zhengshui/zhengshui.github.io.git/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ios" scheme="https://github.com/zhengshui/zhengshui.github.io.git/tags/ios/"/>
    
      <category term="移动端" scheme="https://github.com/zhengshui/zhengshui.github.io.git/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="fixed，css" scheme="https://github.com/zhengshui/zhengshui.github.io.git/tags/fixed%EF%BC%8Ccss/"/>
    
  </entry>
  
  <entry>
    <title>「1」基于react的技术栈重构（一）</title>
    <link href="https://github.com/zhengshui/zhengshui.github.io.git/2017/06/12/1.react-webapp/"/>
    <id>https://github.com/zhengshui/zhengshui.github.io.git/2017/06/12/1.react-webapp/</id>
    <published>2017-06-12T03:30:23.000Z</published>
    <updated>2017-06-12T03:39:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>###参考</p>
<ol>
<li><a href="https://github.com/yeoman/generator-webapp">https://github.com/yeoman/generator-webapp</a></li>
</ol>
<p>###简介</p>
<blockquote>
<ul>
<li>基于react的技术栈重构dhome-teach</li>
<li>基础语言： ES6 react sass </li>
<li>脚手架： yeoman generator-webapp</li>
<li>构建工具 ： gulp + webpack</li>
<li>统一数据管理： redux</li>
<li>路由控制器： react-router react-router-redux</li>
<li>性能优化： immutable purerender</li>
<li>前后端分离： webpack-dev-server(proxy)</li>
<li>代码规范： eslintrc</li>
<li>单元测试 ： karma</li>
<li>开发效率提升 : redux-devtools react-hot-loader</li>
</ul>
</blockquote>
<p>###使用的主要库：</p>
<ul>
<li>react                                           //view</li>
<li>redux                                           //数据管理</li>
<li>react-router react-router-redux                 //路由</li>
<li>ReactCSStransitionGroup                          //react官方动画库</li>
<li>axios                                           //取数据</li>
<li>redux-thunk                                     //redux异步控制</li>
<li>react-hot-loader                                 //热替换</li>
<li>create-react-app                                 //react官方脚手架</li>
<li>lib-flexible                                   //移动端自适应</li>
<li>sass                                           //css预处理器</li>
</ul>
<p>###使用：</p>
<ol>
<li>前期准备，代码规范<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm i -g gulp</div><div class="line">npm i -g gulp-cli</div><div class="line">npm i -g webpack</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>使用网易NEC规范 <a href="http://nec.netease.com/standard" target="_blank" rel="external">http://nec.netease.com/standard</a></li>
</ul>
<ol>
<li><p>使用脚手架工具快速搭建基础工程</p>
</li>
<li><p>开始,开发模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm i</div><div class="line">gulp webpack:watch</div></pre></td></tr></table></figure>
</li>
<li><p>部署</p>
</li>
</ol>
<ol>
<li>使用redux-devtools工具 <a href="https://github.com/gaearon/redux-devtools/blob/master/docs/Walkthrough.md">https://github.com/gaearon/redux-devtools/blob/master/docs/Walkthrough.md</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev redux-devtools</div><div class="line">npm install --save-dev redux-devtools-log-monitor</div><div class="line">npm install --save-dev redux-devtools-dock-monitor</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="主要技术点总结："><a href="#主要技术点总结：" class="headerlink" title="主要技术点总结："></a>主要技术点总结：</h3><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><ol>
<li>使用normalize.css reset样式<br><a href="https://github.com/necolas/normalize.css">https://github.com/necolas/normalize.css</a></li>
</ol>
<h3 id="webpack-配置"><a href="#webpack-配置" class="headerlink" title="webpack 配置"></a>webpack 配置</h3><p>loaders：</p>
<h3 id="react-学习记录"><a href="#react-学习记录" class="headerlink" title="react 学习记录"></a>react 学习记录</h3><p>1.像设计师一样思考<br>已知“低保真原型和JSON数据结构”；<br>通过对比、重复、亲密性原则进行组件的划分，定义组件并命名；<br>然后划分组件层次（并列、包含）；</p>
<p>2.构建静态版本<br>利用数据模型渲染一个没有交互的静态版本；<br>可以自上而下或者自下而上的构建静态组件；<br>要求组件只使用render()方法，且只能用props传递数据；</p>
<p>3.确定最小的可变状态（state）<br>如何确定最小的state？<br>——列出应用所有的数据块；<br>——逐一对以上数据块思考三个问题：<br>①是通过props从父级传递过来么？如果是，则可能不是state。<br>②随时间变化么？如果不变，则可能不是state。<br>//说明可以通过props传递；<br>③能否基于其它state或者props计算出？如果可以，则不是state。</p>
<p>4.定义getInitialState()所在的组件<br>React 总是在组件层级中单向数据流动的；<br>①找出可以修改或者拥有该state的所有components；<br>②确定一个层级高于①中的所有组件单一组件；<br>③如果找不到该单一组件，则创建该组件；<br>//仅仅为了定义该state；</p>
<p>以上 to be continued…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###参考&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeoman/generator-webapp&quot;&gt;https://github.com/yeoman/generator-webapp&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;###简
    
    </summary>
    
      <category term="前端" scheme="https://github.com/zhengshui/zhengshui.github.io.git/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Redux" scheme="https://github.com/zhengshui/zhengshui.github.io.git/tags/Redux/"/>
    
      <category term="React" scheme="https://github.com/zhengshui/zhengshui.github.io.git/tags/React/"/>
    
      <category term="JavaScript" scheme="https://github.com/zhengshui/zhengshui.github.io.git/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>「0」Hello World</title>
    <link href="https://github.com/zhengshui/zhengshui.github.io.git/2017/06/12/0.hello-world/"/>
    <id>https://github.com/zhengshui/zhengshui.github.io.git/2017/06/12/0.hello-world/</id>
    <published>2017-06-12T03:30:22.000Z</published>
    <updated>2017-06-12T03:39:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="零、Blog的由来"><a href="#零、Blog的由来" class="headerlink" title="零、Blog的由来"></a>零、Blog的由来</h2><p>作为一个学计算机的，一直想整个自己的 Blog，尤其是最近在搞前端。先是看到 <a href="http://jekyllcn.com/" target="_blank" rel="external">jekyll</a> 感觉不错，折腾了半天感觉还是不够给力。<br>最后还是选择了 <a href="https://hexo.io/" target="_blank" rel="external">hexo3</a>。</p>
<a id="more"></a>
<p>主要是这几个优点吧：</p>
<ul>
<li>免费╮(╯▽╰)╭</li>
<li>基于 Node.js</li>
<li>速度快、操作更简单、命令少，专注于写作本身</li>
<li>由于 deploy 命令，发布到 github 上生成静态站点也很简单</li>
</ul>
<p>所以整个 Blog 就是采用 <a href="https://hexo.io/" target="_blank" rel="external">hexo3</a> + <a href="https://pages.github.com/" target="_blank" rel="external">github pages</a>,主题基于 <a href="https://github.com/yscoder/hexo-theme-indigo">indigo</a> 进行修改，下面就详细说说怎么搭起来吧…</p>
<h2 id="一、hexo的安装"><a href="#一、hexo的安装" class="headerlink" title="一、hexo的安装"></a>一、hexo的安装</h2><p>首先由于 hexo 是基于 Node.js 开发的，所以我们先要安装 Node.js 环境，进入<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js官网</a>，一般会发现有两个版本：LTS 和 Stable。</p>
<p>这两个版本的区别在于一个是 LTS 长期支持版（也是推荐选项），另一个是拥有最新功能的稳定版（适合有新功能需求的尝鲜用户）。</p>
<p>安装完成后，在命令行运行以下命令（其中括号的意思是 install 可以缩写为 i）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i(nstall) -g hexo</div></pre></td></tr></table></figure>
<p><em>npm 安装方式中 -g 的意思是全局安装。</em></p>
<h2 id="二、初体验"><a href="#二、初体验" class="headerlink" title="二、初体验~"></a>二、初体验~</h2><h3 id="2-1-生成项目"><a href="#2-1-生成项目" class="headerlink" title="2.1. 生成项目"></a>2.1. 生成项目</h3><p>找到一个合适的位置，创建我们的项目文件夹：</p>
<ul>
<li>一般的用户：自己图形界面新建了一个,然后点进去</li>
<li>命令行用户：<code>mkdir &lt;folder&gt; &amp;&amp; cd &lt;folder&gt;</code></li>
<li>hexo的用户：<code>hexo init &lt;folder&gt; &amp;&amp; cd &lt;folder&gt;</code></li>
</ul>
<h3 id="2-2-安装依赖"><a href="#2-2-安装依赖" class="headerlink" title="2.2. 安装依赖"></a>2.2. 安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i(nstall)</div></pre></td></tr></table></figure>
<p>npm 就会自动根据 package.json 中的配置自动进行安装</p>
<h3 id="2-3-运行预览"><a href="#2-3-运行预览" class="headerlink" title="2.3. 运行预览"></a>2.3. 运行预览</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g(enerate)</div><div class="line">$ hexo s(erver)</div></pre></td></tr></table></figure>
<p><em>如果这步报错一般是因为没装 hexo-server，运行以下命令安装即可：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i(nstall) --save  hexo-server</div></pre></td></tr></table></figure>
<blockquote>
<p>npm 安装方式中 –save 的意思是作为项目依赖(dependencies)进行安装，可以缩写为 -S (注意大写)<br>此外还有 –save-dev 的意思是作为项目的「开发」依赖(devDependencies)进行安装，可以缩写为 -D (注意大写)<br>这两种安装方式都会将这个包的名称和版本写进 package.json 配置文件中</p>
</blockquote>
<p>最后打开浏览器输入<code>http://localhost:4000</code>就可以看到页面啦～</p>
<h2 id="三、换主题（theme）"><a href="#三、换主题（theme）" class="headerlink" title="三、换主题（theme）"></a>三、换主题（theme）</h2><p>然而只是使用默认的主题（theme）怎么会有逼格→_→，果断要整一个吊炸天的主题呀~，下面以 <a href="https://github.com/yscoder/hexo-theme-indigo">indigo</a> 为例作为说明。</p>
<h3 id="3-1-下载主题"><a href="#3-1-下载主题" class="headerlink" title="3.1. 下载主题"></a>3.1. 下载主题</h3><p>首先在项目目录下（就是说有个 themes 的文件夹），执行以下命令，将主题下载到 themes 文件夹下的 indigo 文件夹中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/yscoder/hexo-theme-indigo themes/indigo</div></pre></td></tr></table></figure>
<h3 id="3-2-配置使用主题"><a href="#3-2-配置使用主题" class="headerlink" title="3.2. 配置使用主题"></a>3.2. 配置使用主题</h3><p>接着修改 _config.yml（项目的配置文件，不是主题的） 将 theme 改为 indigo</p>
<h2 id="四、部署到-github-pages"><a href="#四、部署到-github-pages" class="headerlink" title="四、部署到 github pages"></a>四、部署到 github pages</h2><h3 id="4-1-安装-hexo-deployer-git"><a href="#4-1-安装-hexo-deployer-git" class="headerlink" title="4.1. 安装 hexo-deployer-git"></a>4.1. 安装 hexo-deployer-git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i(nstall) hexo-deployer-git --save</div></pre></td></tr></table></figure>
<h3 id="4-2-关于-github-pages"><a href="#4-2-关于-github-pages" class="headerlink" title="4.2. 关于 github pages"></a>4.2. 关于 github pages</h3><h4 id="4-2-1-分类"><a href="#4-2-1-分类" class="headerlink" title="4.2.1. 分类"></a>4.2.1. 分类</h4><h5 id="1-项目站点（Project-Pages）"><a href="#1-项目站点（Project-Pages）" class="headerlink" title="1. 项目站点（Project Pages）"></a>1. 项目站点（Project Pages）</h5><p>github 会根据 gh-pages 分支下文件生成静态页面，地址是  [yourName].github.io/[projectName]。（[yourName] 是你的账户名，[projectName] 是你的项目名）</p>
<h5 id="2-个人或公司站点（User-Organization-Pages）"><a href="#2-个人或公司站点（User-Organization-Pages）" class="headerlink" title="2. 个人或公司站点（User/Organization Pages）"></a>2. 个人或公司站点（User/Organization Pages）</h5><p>首先要创建一个叫做 [yourName].github.io 的项目，接着 github 会根据 master 分支下文件生成静态页面，地址是 [yourName].github.io/。</p>
<h4 id="4-2-2-一些坑…"><a href="#4-2-2-一些坑…" class="headerlink" title="4.2.2. 一些坑…"></a>4.2.2. 一些坑…</h4><ul>
<li>有的主题中各种静态文件路径是写死的，比如好多主题中的文件引入是针对第二类页面写死的。</li>
<li>有些主题中的 CDN 资源被墙，那就需要找到这些文件手动修改地址╮(╯▽╰)╭。</li>
</ul>
<h3 id="4-3-修改-config-yml-文件"><a href="#4-3-修改-config-yml-文件" class="headerlink" title="4.3. 修改 _config.yml 文件"></a>4.3. 修改 _config.yml 文件</h3><p><a href="htjtps://github.com/hexojs/hexo-deployer-git">官方文档</a>中是这么介绍的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># You can use this:</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: &lt;repository url&gt;</div><div class="line">  branch: [branch]</div><div class="line">  message: [message]</div><div class="line"></div><div class="line"><span class="comment"># or this:</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  message: [message]</div><div class="line">  repo:</div><div class="line">    github: &lt;repository url&gt;,[branch]</div><div class="line">    gitcafe: &lt;repository url&gt;,[branch]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* repo: Repository URL</div><div class="line">* branch: Git branch to deploy the static site to</div><div class="line">* message: Commit message. The default commit message is Site updated: &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125;.</div></pre></td></tr></table></figure>
<blockquote>
<p>根据 4.2. 所述，部署部分的填写也分为两种情况：</p>
</blockquote>
<h4 id="1-个人或公司站点"><a href="#1-个人或公司站点" class="headerlink" title="1. 个人或公司站点"></a>1. 个人或公司站点</h4><ul>
<li>repo：填写项目地址，例如 <code>git@github.com:BuptStEve/BuptStEve.github.io.git</code></li>
<li>branch：填写 <code>master</code></li>
</ul>
<h4 id="2-项目站点"><a href="#2-项目站点" class="headerlink" title="2. 项目站点"></a>2. 项目站点</h4><ul>
<li>repo：填写项目地址，例如 <code>git@github.com:BuptStEve.git</code></li>
<li>branch：填写 <code>gh-pages</code></li>
<li>url：<a href="https://buptsteve.github.io/" target="_blank" rel="external">https://buptsteve.github.io/</a> （注意最后的 /）</li>
<li>root：/ （注意最后的 /）</li>
</ul>
<h3 id="4-4-开始部署"><a href="#4-4-开始部署" class="headerlink" title="4.4. 开始部署"></a>4.4. 开始部署</h3><p>首先生成站点文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div></pre></td></tr></table></figure>
<p>接着发布</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d(eploy)</div></pre></td></tr></table></figure>
<p>最后打开对应地址就可以看到自己的博客啦～=￣ω￣=～。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;零、Blog的由来&quot;&gt;&lt;a href=&quot;#零、Blog的由来&quot; class=&quot;headerlink&quot; title=&quot;零、Blog的由来&quot;&gt;&lt;/a&gt;零、Blog的由来&lt;/h2&gt;&lt;p&gt;作为一个学计算机的，一直想整个自己的 Blog，尤其是最近在搞前端。先是看到 &lt;a href=&quot;http://jekyllcn.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jekyll&lt;/a&gt; 感觉不错，折腾了半天感觉还是不够给力。&lt;br&gt;最后还是选择了 &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo3&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://github.com/zhengshui/zhengshui.github.io.git/categories/blog/"/>
    
    
      <category term="hexo" scheme="https://github.com/zhengshui/zhengshui.github.io.git/tags/hexo/"/>
    
  </entry>
  
</feed>
