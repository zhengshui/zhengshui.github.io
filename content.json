[{"title":"my-info","date":"2017-06-12T03:52:56.000Z","path":"2017/06/12/4.my-info/","text":"","tags":[]},{"title":"「3」codewars笔记","date":"2017-06-12T03:30:51.000Z","path":"2017/06/12/3.codewars/","text":"个人信息 郑水/男/1992 手机：18826408914 Email：shuizheng123@gmail.com / 1941172562@qq.com 微信号：w18826408914 github：https://github.com/zhengshui 个人博客： https://zhengshui.github.io/ 本科/广东工业大学数字媒体技术系 工作年限：2年多 期望职位：前端开发工程师 期望薪资：月薪10k~13k，特别喜欢的公司可例外 工作经历广州数字人健康科技有限公司 （ 2017年3月 ~ 至今 ）家校健康WebApp 家校健康主张互联网+校园+健康的理念，基于互联网，连接学校、家庭与医生，为广大学生身心健康提供健康服务，起到预防为主、高效引导的作用。 主要工作：基于react的技术栈重构家校健康v2.0，使用gulp+webpack的构建工具，redux负责数据管理，react-router-dom+react-router-redux负责路由控制，代码规范遵循网易NEC规范（使用eslint工具进行检查），css预处理器使用scss，移动端自适应采用lib-flexible可伸缩布局方案。 结果：使用react来编码是一件很舒服的事情，就像搭积木。组件化，工程化，标准化让项目的可维护性和可扩展性大大的加强。 盈世信息科技(北京)有限公司 （ 2015年6月 ~ 2017年 ）Coremail XT5 企业邮件系统 （http://mt1.icoremail.net/） Coremail XT5，新一代邮件系统，提供快速、高效、便携的协同办公体验，是国内邮件系统的领先者。整个项目非常庞大，分别模块化为邮件，网盘，日程，通讯录，应用中心，设置中心，然后每个模块再细分进行组件化。前端技术栈：CUI （基于AraleJs） + grunt + Bower + Less + handlebars 负责工作：各个模块的迭代维护与二次定制开发，在这次项目中，印象比较深的任务有：信纸组件开发，第三方网盘，奥联加密，金山软件的Kmail,中国科学院定制开发，139邮箱定制开发。 项目属于敏捷式开发，灰度环境每天打包两次，每天更新的功能可以立刻呈现到公司的每个人，这需要我们具备快速定位问题和解决问题的能力，这点我能很好的完成（多次得到同事的感谢，尽管这是我们的责任，但是这样可以大大提高我们撸码的热情）。 结果：相对于旧的邮件系统XT3，XT5速度得到质的提升，整体页面流量节省80%以上，使得邮箱网页版的响应速度提升近50%。在整个项目过程中，个人收获巨大：前端基础更加扎实，浏览器兼容性，代码质量，前端工程化，组件化。 金山企业邮 Kmail (https://mail.kmail.com) Kmail是金山软件携手国内最大的邮件服务商盈世Coremail根据XT5定制开发的 负责工作： 界面重构，部分模块重构，单点登录对接联调，模块皮肤切换。 这个项目是居于XT5的（本身有在维护），所以整体写起来比较流畅，最终按时按质完成了开发任务，并获得金山软件产品好评。 Coremail 官网（http://www.coremail.cn/） 负责维护Coremail 官网能及时处理官网的各种问题，能很好的完成某个模块的更新，得到市场部同事的肯定。 蓝鸽集团 (实习)（ 2014年7月 ~ 2015年2月 ）智能化作业系统 基于智能化知识点识别技术及大数据智能诊断技术的蓝鸽作业系统，主要面向广大中小学，同时兼容大学应用，从而实现大、中小学的一体化设计。 结果：很好地完成了智能化作业系统3个模块的前端重构和开发的工作，项目给了我很大的收获：对前后台的数据的交互更加深刻，对浏览器兼容性问题积累更多，对jq的运用更加熟悉。让自己负责的模块渐进增强（只要是用css3进一步优化页面），获得较好的效果。 技能清单以下均为我熟练使用的技能 前端基础：JS/HTML5/CSS3/JQ/ 后端知识：Node（了解），java（看懂） 前端框架：AraleJS/Bootstrap/React/Vue 前端工具：Webpack/Gulp/SaSS/LeSS/cordova/Photoshop 版本管理、文档和自动化部署工具：Svn/Git 参考技能关键字 web webApp javascript css3 jquery html5 react 前端工程化构建 其他社会实践 校食堂监督委员会 组长 负责组员工作安排，维护同学权益。成果：我们小组所负责食堂有明显的改善，获得同学和领导的好评 数字媒体技术协会 部长 和小伙伴策划和举办数字媒体展，UPA中国宣讲会。在数字媒体协会的日子里，我所获许多，友谊，快乐，与人交流的能力，团队协作能力。 志愿者经历 广州东站春运志愿者 广州残疾和贫困家庭子女义教志愿者 兴趣爱好喜欢运动（健身，篮球、足球、排球），有跑步习惯，能在人群中高歌一曲。 致谢感谢您花时间阅读我的简历，期待能有机会和您共事。","tags":[{"name":"简历","slug":"简历","permalink":"https://github.com/zhengshui/zhengshui.github.io.git/tags/简历/"},{"name":"前端开发工程师，求职","slug":"前端开发工程师，求职","permalink":"https://github.com/zhengshui/zhengshui.github.io.git/tags/前端开发工程师，求职/"}]},{"title":"「2」移动端的坑","date":"2017-06-12T03:30:24.000Z","path":"2017/06/12/2.mobile-pit/","text":"1.iOS事件委托失效在iOS系统中当事件委托对象为body／document元素时可能会出现事件委托失效的情况； 具体原因为iOS中除了a、button等可点击元素外，其他元素事件不会传递到body／document； 决解方法： 1、将对应元素改为a、button等可点击元素 2、将事件委托到除body／document外的父元素中 3、给​目标元素加一条样式规则”cursor: pointer”； 2. fixed（固定位置定位）的问题https://github.com/maxzhang/maxzhang.github.com/issues/2 总结 : 在 android 手机下 fixed 表现要比 iOS 更好，软键盘弹出时，不会影响fixed元素定位； 不要在 fixed 元素中使用 input / textarea 元素,而是一个伪input，点击时弹出一个新层。还是保留之前的态度，依然不推荐在 Android下使用 iScroll。在开发项目时，可以考虑分为两个版本：iOS下使用 iScroll的解决方案，Android下使用 position:fixed。","tags":[{"name":"ios","slug":"ios","permalink":"https://github.com/zhengshui/zhengshui.github.io.git/tags/ios/"},{"name":"移动端","slug":"移动端","permalink":"https://github.com/zhengshui/zhengshui.github.io.git/tags/移动端/"},{"name":"fixed，css","slug":"fixed，css","permalink":"https://github.com/zhengshui/zhengshui.github.io.git/tags/fixed，css/"}]},{"title":"「1」基于react的技术栈重构（一）","date":"2017-06-12T03:30:23.000Z","path":"2017/06/12/1.react-webapp/","text":"###参考 https://github.com/yeoman/generator-webapp ###简介 基于react的技术栈重构dhome-teach 基础语言： ES6 react sass 脚手架： yeoman generator-webapp 构建工具 ： gulp + webpack 统一数据管理： redux 路由控制器： react-router react-router-redux 性能优化： immutable purerender 前后端分离： webpack-dev-server(proxy) 代码规范： eslintrc 单元测试 ： karma 开发效率提升 : redux-devtools react-hot-loader ###使用的主要库： react //view redux //数据管理 react-router react-router-redux //路由 ReactCSStransitionGroup //react官方动画库 axios //取数据 redux-thunk //redux异步控制 react-hot-loader //热替换 create-react-app //react官方脚手架 lib-flexible //移动端自适应 sass //css预处理器 ###使用： 前期准备，代码规范123npm i -g gulpnpm i -g gulp-clinpm i -g webpack 使用网易NEC规范 http://nec.netease.com/standard 使用脚手架工具快速搭建基础工程 开始,开发模式 12npm igulp webpack:watch 部署 使用redux-devtools工具 https://github.com/gaearon/redux-devtools/blob/master/docs/Walkthrough.md123npm install --save-dev redux-devtoolsnpm install --save-dev redux-devtools-log-monitornpm install --save-dev redux-devtools-dock-monitor 主要技术点总结：样式 使用normalize.css reset样式https://github.com/necolas/normalize.css webpack 配置loaders： react 学习记录1.像设计师一样思考已知“低保真原型和JSON数据结构”；通过对比、重复、亲密性原则进行组件的划分，定义组件并命名；然后划分组件层次（并列、包含）； 2.构建静态版本利用数据模型渲染一个没有交互的静态版本；可以自上而下或者自下而上的构建静态组件；要求组件只使用render()方法，且只能用props传递数据； 3.确定最小的可变状态（state）如何确定最小的state？——列出应用所有的数据块；——逐一对以上数据块思考三个问题：①是通过props从父级传递过来么？如果是，则可能不是state。②随时间变化么？如果不变，则可能不是state。//说明可以通过props传递；③能否基于其它state或者props计算出？如果可以，则不是state。 4.定义getInitialState()所在的组件React 总是在组件层级中单向数据流动的；①找出可以修改或者拥有该state的所有components；②确定一个层级高于①中的所有组件单一组件；③如果找不到该单一组件，则创建该组件；//仅仅为了定义该state； 以上 to be continued…","tags":[{"name":"Redux","slug":"Redux","permalink":"https://github.com/zhengshui/zhengshui.github.io.git/tags/Redux/"},{"name":"React","slug":"React","permalink":"https://github.com/zhengshui/zhengshui.github.io.git/tags/React/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://github.com/zhengshui/zhengshui.github.io.git/tags/JavaScript/"}]},{"title":"「0」Hello World","date":"2017-06-12T03:30:22.000Z","path":"2017/06/12/0.hello-world/","text":"零、Blog的由来作为一个学计算机的，一直想整个自己的 Blog，尤其是最近在搞前端。先是看到 jekyll 感觉不错，折腾了半天感觉还是不够给力。最后还是选择了 hexo3。 主要是这几个优点吧： 免费╮(╯▽╰)╭ 基于 Node.js 速度快、操作更简单、命令少，专注于写作本身 由于 deploy 命令，发布到 github 上生成静态站点也很简单 所以整个 Blog 就是采用 hexo3 + github pages,主题基于 indigo 进行修改，下面就详细说说怎么搭起来吧… 一、hexo的安装首先由于 hexo 是基于 Node.js 开发的，所以我们先要安装 Node.js 环境，进入Node.js官网，一般会发现有两个版本：LTS 和 Stable。 这两个版本的区别在于一个是 LTS 长期支持版（也是推荐选项），另一个是拥有最新功能的稳定版（适合有新功能需求的尝鲜用户）。 安装完成后，在命令行运行以下命令（其中括号的意思是 install 可以缩写为 i）： 1$ npm i(nstall) -g hexo npm 安装方式中 -g 的意思是全局安装。 二、初体验~2.1. 生成项目找到一个合适的位置，创建我们的项目文件夹： 一般的用户：自己图形界面新建了一个,然后点进去 命令行用户：mkdir &lt;folder&gt; &amp;&amp; cd &lt;folder&gt; hexo的用户：hexo init &lt;folder&gt; &amp;&amp; cd &lt;folder&gt; 2.2. 安装依赖1$ npm i(nstall) npm 就会自动根据 package.json 中的配置自动进行安装 2.3. 运行预览12$ hexo g(enerate)$ hexo s(erver) 如果这步报错一般是因为没装 hexo-server，运行以下命令安装即可： 1$ npm i(nstall) --save hexo-server npm 安装方式中 –save 的意思是作为项目依赖(dependencies)进行安装，可以缩写为 -S (注意大写)此外还有 –save-dev 的意思是作为项目的「开发」依赖(devDependencies)进行安装，可以缩写为 -D (注意大写)这两种安装方式都会将这个包的名称和版本写进 package.json 配置文件中 最后打开浏览器输入http://localhost:4000就可以看到页面啦～ 三、换主题（theme）然而只是使用默认的主题（theme）怎么会有逼格→_→，果断要整一个吊炸天的主题呀~，下面以 indigo 为例作为说明。 3.1. 下载主题首先在项目目录下（就是说有个 themes 的文件夹），执行以下命令，将主题下载到 themes 文件夹下的 indigo 文件夹中。 1$ git clone https://github.com/yscoder/hexo-theme-indigo themes/indigo 3.2. 配置使用主题接着修改 _config.yml（项目的配置文件，不是主题的） 将 theme 改为 indigo 四、部署到 github pages4.1. 安装 hexo-deployer-git1$ npm i(nstall) hexo-deployer-git --save 4.2. 关于 github pages4.2.1. 分类1. 项目站点（Project Pages）github 会根据 gh-pages 分支下文件生成静态页面，地址是 [yourName].github.io/[projectName]。（[yourName] 是你的账户名，[projectName] 是你的项目名） 2. 个人或公司站点（User/Organization Pages）首先要创建一个叫做 [yourName].github.io 的项目，接着 github 会根据 master 分支下文件生成静态页面，地址是 [yourName].github.io/。 4.2.2. 一些坑… 有的主题中各种静态文件路径是写死的，比如好多主题中的文件引入是针对第二类页面写死的。 有些主题中的 CDN 资源被墙，那就需要找到这些文件手动修改地址╮(╯▽╰)╭。 4.3. 修改 _config.yml 文件官方文档中是这么介绍的 1234567891011121314# You can use this:deploy: type: git repo: &lt;repository url&gt; branch: [branch] message: [message]# or this:deploy: type: git message: [message] repo: github: &lt;repository url&gt;,[branch] gitcafe: &lt;repository url&gt;,[branch] 123* repo: Repository URL* branch: Git branch to deploy the static site to* message: Commit message. The default commit message is Site updated: &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125;. 根据 4.2. 所述，部署部分的填写也分为两种情况： 1. 个人或公司站点 repo：填写项目地址，例如 git@github.com:BuptStEve/BuptStEve.github.io.git branch：填写 master 2. 项目站点 repo：填写项目地址，例如 git@github.com:BuptStEve.git branch：填写 gh-pages url：https://buptsteve.github.io/ （注意最后的 /） root：/ （注意最后的 /） 4.4. 开始部署首先生成站点文件 1$ hexo g 接着发布 1$ hexo d(eploy) 最后打开对应地址就可以看到自己的博客啦～=￣ω￣=～。","tags":[{"name":"hexo","slug":"hexo","permalink":"https://github.com/zhengshui/zhengshui.github.io.git/tags/hexo/"}]}]